#include <gtest/gtest.h>
#include <gmock/gmock.h>

#include <memory>
#include <string>

using ::testing::_;
using ::testing::InSequence;
using ::testing::Invoke;
using ::testing::Return;

#include "mcu/uartboot.h"

class UartBootMock : public UartBoot
{
public:
    MOCK_METHOD(uint32_t, readLatestApplicationTimestampFromInternalEeprom, (), (const, override));
    MOCK_METHOD(uint8_t, uart_read, (), (const, override));
    MOCK_METHOD(void, writeToPageBuffer, (const uint16_t address, const uint8_t *data), (const, override));
};

class Fixture : public ::testing::Test
{
public:
    void SetUp() override
    {
    }
    static uint8_t onUartRead()
    {
        static uint16_t i{0};
        return data_[++i - 1];
    }

    static void onWriteToPageBuffer(const uint16_t address, const uint8_t *data)
    {
        static uint8_t page{0};
        for (uint8_t j = 0; j < kPageSize; ++j)
        {
            flash_buffer_[page + j] = data[j];
        }
        page += kPageSize;
    }

protected:
    UartBootMock sut_{};
    static uint8_t data_[kFlashSize];
    static uint8_t flash_buffer_[kFlashSize];
    static uint16_t pos_;
};

uint8_t Fixture::data_[kFlashSize]{
    0xab, 0xd6, 0x9c, 0x3a, 0xd6, 0x22, 0xd1, 0x01,
    0x6d, 0x88, 0xcf, 0xc4, 0x15, 0x1d, 0xad, 0x3e,
    0x7a, 0xb9, 0x06, 0x4f, 0x21, 0x94, 0x23, 0xae,
    0xa9, 0x20, 0xcf, 0x28,
    0x02, 0x00,
    0xD8, 0xE9, 0xB4, 0x1D,

    0x7e, 0x8a, 0x8b, 0xeb, 0x77, 0x7b, 0xa9, 0xd0, 0x80, 0x36, 0x10, 0x8c, 0xd4, 0x79, 0x1b, 0x50,
    0x96, 0x45, 0x11, 0xef, 0x8f, 0x26, 0xdc, 0xc6, 0xa8, 0x88, 0x01, 0x09, 0xd8, 0x71, 0xf1, 0x6f,
    0xfa, 0x70, 0x50, 0x10, 0x60, 0x69, 0xb9, 0xd6, 0xa1, 0xad, 0x12, 0xf9, 0x6e, 0x20, 0x1a, 0x4d,
    0x9e, 0xff, 0xa0, 0x26, 0x58, 0x79, 0xae, 0x7f, 0x5e, 0xf8, 0x20, 0x69, 0xa2, 0x35, 0xb6, 0x38,
    0x9a, 0xb1, 0xc2, 0x12, 0x1f, 0xdd, 0x50, 0x5d, 0x25, 0xd3, 0xd6, 0x16, 0x5c, 0xf8, 0x46, 0x02,
    0x44, 0x81, 0x32, 0x9f, 0xc0, 0x3c, 0x36, 0xb1, 0x5f, 0x76, 0x1a, 0xfd, 0x4f, 0x5d, 0xa7, 0xd8,
    0x45, 0x80, 0x10, 0xf0, 0xc0, 0xe9, 0x31, 0x76, 0x4c, 0xdc, 0x56, 0x6b, 0xdd, 0x43, 0x0b, 0x35,
    0xcb, 0x38, 0xaa, 0x28, 0x62, 0x85, 0x57, 0xbd, 0x7b, 0x82, 0x1e, 0xba, 0xfa, 0x21, 0xb0, 0xd6,
    0x00, 0x00,
    0x16, 0x1A, 0x0B, 0x36,

    0x39, 0x21, 0x3c, 0x3c, 0x34, 0xb1, 0x92, 0xcd, 0xe1, 0xe3, 0x57, 0x7f, 0x29, 0x69, 0x50, 0x1b,
    0x0b, 0xe3, 0xac, 0x94, 0x26, 0xbf, 0xfb, 0x61, 0x50, 0x0b, 0x2e, 0xea, 0x9c, 0x1d, 0x61, 0x59,
    0x54, 0xf3, 0x8a, 0x59, 0x39, 0x9d, 0xde, 0x58, 0x33, 0x8e, 0x4a, 0xef, 0xf1, 0x27, 0x70, 0x4d,
    0x31, 0x56, 0xcb, 0xc5, 0xae, 0x4e, 0x71, 0xd5, 0x6f, 0xf1, 0xd9, 0xab, 0xef, 0xe1, 0xb2, 0xc8,
    0x1a, 0x03, 0x19, 0x71, 0x75, 0x68, 0x16, 0xe1, 0xe4, 0x86, 0xe2, 0xf7, 0xb1, 0x61, 0x70, 0x70,
    0x7e, 0x62, 0x24, 0x0a, 0xa4, 0x62, 0x96, 0xd9, 0xf5, 0x7e, 0x10, 0xb2, 0xf9, 0xa5, 0x9a, 0xdc,
    0x03, 0xbf, 0xc4, 0xd8, 0x10, 0xf2, 0x18, 0xb1, 0xe4, 0xe5, 0x78, 0xd3, 0xd9, 0x85, 0x61, 0x58,
    0x9f, 0x42, 0xce, 0x4f, 0x8e, 0x62, 0x04, 0xe4, 0x76, 0x08, 0x9b, 0x5b, 0x25, 0x05, 0x1c, 0x6c,
    0x01, 0x00,
    0x61, 0x98, 0x40, 0xD3};
uint8_t Fixture::flash_buffer_[kFlashSize];
uint16_t Fixture::pos_{0};

TEST_F(Fixture, MainSinglePageWriteOk_WhenTypical)
{
    uint8_t expected[]{0x7e, 0x8a, 0x8b, 0xeb, 0x77, 0x7b, 0xa9, 0xd0, 0x80, 0x36, 0x10, 0x8c, 0xd4, 0x79, 0x1b, 0x50,
                       0x96, 0x45, 0x11, 0xef, 0x8f, 0x26, 0xdc, 0xc6, 0xa8, 0x88, 0x01, 0x09, 0xd8, 0x71, 0xf1, 0x6f,
                       0xfa, 0x70, 0x50, 0x10, 0x60, 0x69, 0xb9, 0xd6, 0xa1, 0xad, 0x12, 0xf9, 0x6e, 0x20, 0x1a, 0x4d,
                       0x9e, 0xff, 0xa0, 0x26, 0x58, 0x79, 0xae, 0x7f, 0x5e, 0xf8, 0x20, 0x69, 0xa2, 0x35, 0xb6, 0x38,
                       0x9a, 0xb1, 0xc2, 0x12, 0x1f, 0xdd, 0x50, 0x5d, 0x25, 0xd3, 0xd6, 0x16, 0x5c, 0xf8, 0x46, 0x02,
                       0x44, 0x81, 0x32, 0x9f, 0xc0, 0x3c, 0x36, 0xb1, 0x5f, 0x76, 0x1a, 0xfd, 0x4f, 0x5d, 0xa7, 0xd8,
                       0x45, 0x80, 0x10, 0xf0, 0xc0, 0xe9, 0x31, 0x76, 0x4c, 0xdc, 0x56, 0x6b, 0xdd, 0x43, 0x0b, 0x35,
                       0xcb, 0x38, 0xaa, 0x28, 0x62, 0x85, 0x57, 0xbd, 0x7b, 0x82, 0x1e, 0xba, 0xfa, 0x21, 0xb0, 0xd6,

                       0x39, 0x21, 0x3c, 0x3c, 0x34, 0xb1, 0x92, 0xcd, 0xe1, 0xe3, 0x57, 0x7f, 0x29, 0x69, 0x50, 0x1b,
                       0x0b, 0xe3, 0xac, 0x94, 0x26, 0xbf, 0xfb, 0x61, 0x50, 0x0b, 0x2e, 0xea, 0x9c, 0x1d, 0x61, 0x59,
                       0x54, 0xf3, 0x8a, 0x59, 0x39, 0x9d, 0xde, 0x58, 0x33, 0x8e, 0x4a, 0xef, 0xf1, 0x27, 0x70, 0x4d,
                       0x31, 0x56, 0xcb, 0xc5, 0xae, 0x4e, 0x71, 0xd5, 0x6f, 0xf1, 0xd9, 0xab, 0xef, 0xe1, 0xb2, 0xc8,
                       0x1a, 0x03, 0x19, 0x71, 0x75, 0x68, 0x16, 0xe1, 0xe4, 0x86, 0xe2, 0xf7, 0xb1, 0x61, 0x70, 0x70,
                       0x7e, 0x62, 0x24, 0x0a, 0xa4, 0x62, 0x96, 0xd9, 0xf5, 0x7e, 0x10, 0xb2, 0xf9, 0xa5, 0x9a, 0xdc,
                       0x03, 0xbf, 0xc4, 0xd8, 0x10, 0xf2, 0x18, 0xb1, 0xe4, 0xe5, 0x78, 0xd3, 0xd9, 0x85, 0x61, 0x58,
                       0x9f, 0x42, 0xce, 0x4f, 0x8e, 0x62, 0x04, 0xe4, 0x76, 0x08, 0x9b, 0x5b, 0x25, 0x05, 0x1c, 0x6c};
    Metadata in;
    EXPECT_CALL(sut_, uart_read())
        .WillRepeatedly(Invoke(onUartRead));
    EXPECT_CALL(sut_, readLatestApplicationTimestampFromInternalEeprom()).WillOnce(Return(0xFFFFFFFF));
    EXPECT_CALL(sut_, writeToPageBuffer(_, _))
        .WillRepeatedly(Invoke([&](const uint16_t address, const uint8_t *data) { Fixture::onWriteToPageBuffer(address, data); }));

    sut_.main();

    for (uint16_t i = 0; i < sizeof(expected); ++i)
    {
        ASSERT_EQ(flash_buffer_[i], expected[i]);
    }
}
